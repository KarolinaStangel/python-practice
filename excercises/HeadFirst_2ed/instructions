Time for a challenge.
Before you do anything else, take the seven lines of code shown below and
type them into a new window. Save the code as panic.py.
Study the messages that appear on screen. Note how the first four lines of code
take a string (in phrase), and turn it into a list (in plist), before displaying
both phrase and plist on screen.
The other three lines of code take plist and transform it back into a string (in
new_phrase) before displaying plist and new_phrase on screen.
Your challenge is to transform the string "Don’t panic!" into the string
"on tap" using only the list methods shown thus far in this book. (There’s no
hidden meaning in the choice of these two strings: it’s merely a matter of the
letters in “on tap” appearing in "Don’t panic!"). At the moment, panic.py
displays "Don’t panic!" twice.

Hint: use a for loop when performing any operation multiple times.

phrase = "Don't panic!"
plist = list(phrase)
print(phrase)
print(plist)
#      TU
#
#       MA
#
#      BYC
#
#      RESZTA KODU
#
new_phrase = ''.join(plist)
print(plist)
print(new_phrase)





Jakie funkcje przedstawiono w książce do tej pory:

variable.append()
znamy wszyscy i używamy, więc nie wklejam opisu

variable.remove()
remove: takes an object’s value as its sole argument
The remove method removes the first occurrence of a specified data value from a list. If
the data value is found in the list, the object that contains it is removed from the list (and
the list shrinks in size by one). If the data value is not in the list, the interpreter will raise an
error (more on this later):
    nums = [1, 2, 3, 4]
    nums.remove(3) <- 3 is value, not index!
    nums
    [1, 2, 4]

variable.pop()
pop: takes an optional index value as its argument
The pop method removes and returns an object from an existing list based on the
object’s index value. If you invoke pop without specifying an index value, the last
object in the list is removed and returned. If you specify an index value, the object
in that location is removed and returned. If a list is empty or you invoke pop with
a nonexistent index value, the interpreter raises an error (more on this later).
Objects returned by pop can be assigned to a variable if you so wish, in which case
they are retained. However, if the popped object is not assigned to a variable, its
memory is reclaimed and the object disappears.
    nums = [1, 2, 4]
    nums.pop() <- jeśli w nawiasach nic nie ma, usuwa ostatni objekt z listy i wyświetla go(ichyba można go zapisać do zmiennej)
    4

    nums.pop(0) <- podany w nawiasach numer to index, w tym wypadku 0, czyli "wyrzuca" z listy pierwszy obiekt
    1
    nums = [2]

variable.extend()
extend: takes a list of objects as its sole argument
The extend method takes a second list and adds each of its objects to an existing
list. This method is very useful for combining two lists into one:
    nums = [2]
    nums.extend([3, 4])
    nums = [2, 3, 4]

variable.insert()
insert: takes an index value and an object as its arguments
The insert method inserts an object into an existing list before a specified index
value. This lets you insert the object at the start of an existing list or anywhere
within the list. It is not possible to insert at the end of the list, as that’s what the
append method does:
    nums = [2, 3, 4]
    nums.insert(0, 1) <- pierwsza pozycja to numer indexu w który zostanie włożony nowy obiekt (w tym wypadku "0"
                         czyli na początek listy), druga pozycja to obiekt, który wkładamy (w tym wypadku "1")
    nums = [1, 2, 3, 4]
